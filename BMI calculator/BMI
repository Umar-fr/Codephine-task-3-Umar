import tkinter as tk
from tkinter import messagebox
import sqlite3
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

# Database initialization
conn = sqlite3.connect('bmi_data.db')
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        weight REAL,
        height REAL,
        bmi REAL
    )
''')
conn.commit()

class BMIApp:
    def __init__(self, master):
        self.master = master
        self.master.title("BMI Calculator")

        self.name_label = tk.Label(master, text="Name:")
        self.name_label.grid(row=0, column=0, sticky="w", padx=10, pady=5)
        self.name_entry = tk.Entry(master)
        self.name_entry.grid(row=0, column=1, padx=10, pady=5)

        self.weight_label = tk.Label(master, text="Weight (kg):")
        self.weight_label.grid(row=1, column=0, sticky="w", padx=10, pady=5)
        self.weight_entry = tk.Entry(master)
        self.weight_entry.grid(row=1, column=1, padx=10, pady=5)

        self.height_label = tk.Label(master, text="Height (m):")
        self.height_label.grid(row=2, column=0, sticky="w", padx=10, pady=5)
        self.height_entry = tk.Entry(master)
        self.height_entry.grid(row=2, column=1, padx=10, pady=5)

        self.calculate_button = tk.Button(master, text="Calculate BMI", command=self.calculate_bmi)
        self.calculate_button.grid(row=3, column=0, columnspan=2, pady=10)

        self.view_history_button = tk.Button(master, text="View History", command=self.view_history)
        self.view_history_button.grid(row=4, column=0, columnspan=2, pady=10)

    def calculate_bmi(self):
        try:
            weight = float(self.weight_entry.get())
            height = float(self.height_entry.get())
            bmi = weight / (height ** 2)
            name = self.name_entry.get()

            # Save data to the database
            cursor.execute("INSERT INTO users (name, weight, height, bmi) VALUES (?, ?, ?, ?)", (name, weight, height, bmi))
            conn.commit()

            # Display BMI result
            messagebox.showinfo("BMI Result", f"Hello {name}!\nYour BMI is: {bmi}")

            # Clear input fields
            self.name_entry.delete(0, 'end')
            self.weight_entry.delete(0, 'end')
            self.height_entry.delete(0, 'end')

        except ValueError:
            messagebox.showerror("Error", "Invalid input. Please enter valid numeric values.")

    def view_history(self):
        cursor.execute("SELECT name, bmi FROM users")
        data = cursor.fetchall()

        if not data:
            messagebox.showinfo("No Data", "No BMI data available.")
        else:
            names, bmis = zip(*data)

            # Plot BMI trend
            fig, ax = plt.subplots()
            ax.plot(names, bmis, marker='o', linestyle='-')
            ax.set(xlabel='Name', ylabel='BMI', title='BMI Trend')
            ax.grid()
            plt.xticks(rotation=0, ha='right')

            # Display plot in Tkinter window
            plot_frame = tk.Toplevel(self.master)
            plot_frame.title("BMI Trend Analysis")

            canvas = FigureCanvasTkAgg(fig, master=plot_frame)
            canvas.draw()
            canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)

            toolbar = tk.Toolbar(plot_frame, canvas)
            toolbar.update()
            canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)

if __name__ == "__main__":
    root = tk.Tk()
    app = BMIApp(root)
    root.mainloop()

# Close the database connection
conn.close()

